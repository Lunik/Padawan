from dnslib import QTYPE, RCODE
from dnslib import NS, SOA, TXT, PTR

from .record import Record
from .config import Config

#DIGIT_TAG = "%DIGITS%"
#
#ZONE = {
#    'record_pattern': 'wabbit6-' + DIGIT_TAG,
#    'ipv6_subnet': '1.6.a.d.5.6.b.8.5.3.e.0.1.0.a.2.ip6.arpa',
#    'okRecords': [
#        Record(TXT, 'Generated by PadawanV6')
#    ],
#    'koRecords': [
#        Record(TXT, 'PadawanV6 respond only to IPv6 PTR request'),
#        Record(TXT, 'PadawanV6 respond only to \'1.6.a.d.5.6.b.8.5.3.e.0.1.0.a.2.ip6.arpa\' zone'),
#        Record(NS, 'ns.banana.'),
#        Record(SOA, 'ns.banana')
#    ]
#}

CONFIG = Config()

class Resolver:
    def __init__(self):
        self.zones = {}

    def resolve(self, request, handler):
        reply = request.reply()

        print(CONFIG.ipv6_subnet,  str(request.q.qname))
        if request.q.qtype == QTYPE.PTR and CONFIG.ipv6_subnet in str(request.q.qname):
            for record in CONFIG.records['ok']:
                reply.add_answer(record.as_rr(request.q.qname))

            ipv6_digits = str(request.q.qname).replace(CONFIG.ipv6_subnet, '').replace('.', '')
            code = CONFIG.record_pattern.replace(CONFIG.DIGIT_TAG, ipv6_digits)
            reply.add_answer(Record(PTR, code).as_rr(request.q.qname))
        else:
            reply.header.rcode = getattr(RCODE, 'NXDOMAIN')
            for record in CONFIG.records['ko']:
                reply.add_answer(record.as_rr(request.q.qname))

        return reply
